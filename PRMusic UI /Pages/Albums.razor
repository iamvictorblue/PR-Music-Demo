@page "/albums"
@using PRMusic_UI.Services.Contracts
@inject NavigationManager _navigationManager 
@inject IAlbumService _repo
@inject HttpClient httpclient

<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>



table {
  font-family: Tahoma, fantasy;
  border-collapse: collapse;
  width: 100%;
}

td, th {
  border: 1px solid black;
  text-align: center;
  padding: 8px;
}

tr:nth-child(even) {
  background-color: #dddddd;
}
.button1 {
  border: none;
  font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
  color: black;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 15px;
  margin: 4px 2px;
  cursor: pointer;
  background-color: #008CBA

}

.button2 {
  border: none;
  font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
  color: black;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 15px;
  margin: 4px 2px;
  cursor: pointer;
  background-color: #FF0000;



}
.header1 {
  font-size: 40px;
  font-weight: 600;
  background-image: linear-gradient(to left, #553c9a, #b393d3);
  color: transparent;
  background-clip: text;
  -webkit-background-clip: text;
}


.button3 {
  border: none;
  font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
  color: black;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 15px;
  margin: 4px 2px;
  cursor: pointer;
  background-color: mediumaquamarine

}

</style>
</head>


@if(albums == null)
{
    <h1 class="header h1">Loading albums <i class="fa fa-spinner fa-pulse"></i> </h1>
    
   
}
else
{
    var albumCount = albums.Count();
    <h1 class="header1">Albums</h1> <h3 class="mb-5">Number of Albums: @albumCount  &nbsp; &nbsp; &nbsp; <button class = "button3" @onclick="@(() => _navigationManager.NavigateTo("/albums/create"))">Create Album</button> </h3>
    

    <table>
        <tr>
        <th>Album</th>
        <th>Genre</th>
        <th>ReleaseDate</th>
        <th>Actions</th>
    </tr>

@foreach(var item in albums)
    {
        <tr>
            <td>@item.Songs.Album</td>
            <td>@item.Genre</td>
            <td>@item.ReleaseDate</td>
            @*<td><img src="~/bad-bunny-un-verano-sin-ti-Cover-Art.jpg"></td>*@
            <td>
            <i class="fa fa-hand-o-right"></i>
            <button class="button1" @onclick="@(()=> _navigationManager.NavigateTo($"/update/{item.Id}"))">Update</button> 
            <i class="fa fa-hand-o-left"></i>
            <i class="fa fa-hand-o-right"></i>
            <button class = "button2" @onclick="() => OpenDeleteDialog(item)" type="button">Delete</button>
            <i class="fa fa-hand-o-left"></i>
            </td>
        </tr>                    
    }
    </table>
}




@if (DeleteDialogOpen)
{
    <ModalDialog Title="Are you sure?"
                 Text="Do you want to delete this entry?"
                 OnClose="@OnDeleteDialogClose">
    </ModalDialog>
}


@code{


    public List<AlbumDto> albums { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    public AlbumDto albumdto { get; set; }

    public string? response { get; set; } 

    public bool DeleteDialogOpen { get; set; }

    protected override async Task OnInitializedAsync()
    {
        albums = (List<AlbumDto>)await _repo.GetAlbums();

    }

    public async Task OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            await DeleteAlbum(albumdto);
            StateHasChanged();
            OnInitializedAsync();

        }

        DeleteDialogOpen = false;
        StateHasChanged();
    }

    public async Task OpenDeleteDialog(AlbumDto album)
    {
        DeleteDialogOpen = true;
        albumdto = await _repo.GetAlbumById(album.Id);
         
      }
      
      protected async Task<string?> DeleteAlbum(AlbumDto album)
    {
        album = await _repo.DeleteAlbum(albumdto.Id);

        //if(album != null)
        //{
        //    response = "Record could not be deleted";
        //}
        return response = "Record was successfully deleted";
     }

        
}

  

