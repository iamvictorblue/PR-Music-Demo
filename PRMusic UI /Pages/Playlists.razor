@page "/playlists"
@using PRMusic_UI.Services.Contracts
@inject NavigationManager _navigationManager 
@inject IPlaylistService _repo

<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>

table {
  font-family: Tahoma, fantasy;
  border-collapse: collapse;
  width: 100%;
}

td, th {
  border: 1px solid black;
  text-align: center;
  padding: 8px;
}

tr:nth-child(even) {
  background-color: #dddddd;
}
.button1 {
  border: none;
  font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
  color: black;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 15px;
  margin: 4px 2px;
  cursor: pointer;
  background-color: #008CBA

}

.button2 {
  border: none;
  font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
  color: black;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 15px;
  margin: 4px 2px;
  cursor: pointer;
  background-color: #FF0000;

}

.button3 {
  border: none;
  font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
  color: black;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 15px;
  margin: 4px 2px;
  cursor: pointer;
  background-color: mediumaquamarine

}
.header1 {
  font-size: 40px;
  font-weight: 600;
  background-image: linear-gradient(to left, #553c9a, #b393d3);
  color: transparent;
  background-clip: text;
  -webkit-background-clip: text;
}

</style>
</head>

@if(playlists == null)
{
    <h3>Loading products...</h3>



}
else
{
    <h3 class="header1">Playlists</h3>

    var playlistCount = playlists.Count();

    <h3 class="mb-5">Number of Playlists: @playlistCount &nbsp; &nbsp; &nbsp; <button class = "button3" @onclick="@(() => _navigationManager.NavigateTo("/playlists/create"))">Create Playlist</button> </h3>

    @if (playlistCount > 0)
    {

                    <table>
                     <tr>
                        <th>Playlist</th>
                        <th>Followers</th>
                        <th>Actions</th>
                    </tr>
                    @foreach(var item in playlists)
                    {
                        <tr>
                            <td>@item.Id</td>
                            <td>@item.Followers</td> 
                            <td>
                            <i class="fa fa-hand-o-right"></i>
                            <button class="button1" @onclick="@(()=> _navigationManager.NavigateTo($"/playlists/update/{item.Id}"))">Update</button> 
                            <i class="fa fa-hand-o-left"></i>
                            <i class="fa fa-hand-o-right"></i>
                            <button class = "button2" @onclick="() => OpenDeleteDialog(item)" type="button">Delete</button>
                            <i class="fa fa-hand-o-left"></i>
                            </td>

                        </tr>
                       
                    }
                    </table>
        
    }



@if (DeleteDialogOpen)
{
    <ModalDialog Title="Are you sure?"
                 Text="Do you want to delete this entry?"
                 OnClose="@OnDeleteDialogClose">
    </ModalDialog>
}





@code{


    public List<PlaylistDto> playlists { get; set; }

    protected override async Task OnInitializedAsync()
    {
        playlists = (List<PlaylistDto>)await _repo.GetPlaylists();

    }

    [Parameter]
    public Guid Id { get; set; }

    public PlaylistDto playlistdto { get; set; }

    public string? response { get; set; } 

    public bool DeleteDialogOpen { get; set; }

    private async Task OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            await DeletePlaylist(playlistdto);           
            _navigationManager.NavigateTo("/");

            
        }

        DeleteDialogOpen = false;
        StateHasChanged();
        

    }

    public async Task OpenDeleteDialog(PlaylistDto playlist)
    {
        DeleteDialogOpen = true;
        playlistdto = await _repo.GetPlaylistById(playlist.Id);

    }

    protected async Task<string?> DeletePlaylist(PlaylistDto playlist)
    {
        playlist = await _repo.DeletePlaylist(playlistdto.Id);

        if(playlist != null)
        {
            return response = "Record could not be deleted";
        }
        return response = "Record was successfully deleted";
    }

  }

  }